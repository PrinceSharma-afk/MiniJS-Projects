// ======================================================
// Global Variables and Initial Setup
// ======================================================

// An array to hold the sequence of colours generated by the game
var gamePattern = [];

// An array to store the sequence of colours the user has clicked
var userClickedPattern = [];

// Array containing the button colours available in the game
var buttonColours = ["red", "blue", "green", "yellow"];

// Flag to determine if the game has started; initially false so that the game starts on first keypress
var started = false;

// Variable to keep track of the current level; starts at 0
var level = 0;

// ======================================================
// Event Listener: Detect First Key Press to Start the Game
// ======================================================

$(document).keypress(function() {
  // Only start the game if it hasn't started already
  if (!started) {
    // Update the title to show the starting level (Level 0)
    $("#level-title").text("Level " + level);
    
    // Call the function to generate the first sequence
    nextSequence();
    
    // Set the started flag to true so that subsequent keypresses don't restart the game
    started = true;
  }
});

// ======================================================
// Event Listener: Detect When a User Clicks a Button
// ======================================================

$(".btn").click(function() {
  // Get the id (colour) of the button that was clicked
  var userChosenColour = $(this).attr("id");
  
  // Append the clicked colour to the user's pattern array
  userClickedPattern.push(userChosenColour);

  // Play sound corresponding to the button colour that was clicked
  playSound(userChosenColour);

  // Animate the button press for a visual effect
  animatePress(userChosenColour);

  // Check the user's most recent answer by passing the index of the last element in the userClickedPattern array
  checkAnswer(userClickedPattern.length - 1);
});

// ======================================================
// Function: nextSequence()
// Purpose: Generate the next sequence for the game
// ======================================================

function nextSequence() {
  // Reset the userClickedPattern for the next level so that the user's answers start fresh
  userClickedPattern = [];

  // Increase the level by 1 each time nextSequence is called
  level++;
  
  // Update the h1 title to show the current level
  $("#level-title").text("Level " + level);

  // Generate a random number between 0 and 3
  var randomNumber = Math.floor(Math.random() * 4);
  
  // Use the random number to select a random colour from buttonColours
  var randomChosenColour = buttonColours[randomNumber];
  
  // Add the randomly chosen colour to the game pattern
  gamePattern.push(randomChosenColour);

  // Create a flash effect by fading the button out and in
  $("#" + randomChosenColour).fadeOut(100).fadeIn(100);
  
  // Play the sound associated with the randomly chosen colour
  playSound(randomChosenColour);
}

// ======================================================
// Function: playSound(name)
// Purpose: Play a sound based on the name passed in
// ======================================================

function playSound(name) {
  // Create a new Audio object and play the corresponding mp3 file from the sounds folder
  var audio = new Audio("sounds/" + name + ".mp3");
  audio.play();
}

// ======================================================
// Function: animatePress(currentColour)
// Purpose: Animate a button press by adding and then removing a CSS class
// ======================================================

function animatePress(currentColour) {
  // Add the "pressed" class to the button that was pressed for visual feedback
  $("#" + currentColour).addClass("pressed");

  // Remove the "pressed" class after 100 milliseconds to revert the effect
  setTimeout(function() {
    $("#" + currentColour).removeClass("pressed");
  }, 100);
}

// ======================================================
// Function: checkAnswer(currentIndex)
// Purpose: Check if the user's most recent answer is correct
// ======================================================

function checkAnswer(currentIndex) {
  // Compare the most recent user answer with the game pattern at the same index
  if (userClickedPattern[currentIndex] === gamePattern[currentIndex]) {
    console.log("success");
    
    // If the user has finished entering their sequence (the lengths are equal)
    if (userClickedPattern.length === gamePattern.length) {
      // Wait for 1000 milliseconds (1 second) and then generate the next sequence
      setTimeout(function() {
        nextSequence();
      }, 1000);
    }
  } else {
    console.log("wrong");
    
    // ======================================================
    // Handle Wrong Answer:
    // 1. Play the "wrong" sound
    // 2. Flash the screen by adding the "game-over" class to the body, then removing it
    // 3. Change the title to prompt the user to restart
    // ======================================================

    playSound("wrong");

    $("body").addClass("game-over");
    setTimeout(function() {
      $("body").removeClass("game-over");
    }, 200);

    $("#level-title").text("Game Over, Press Any Key to Restart");

    // Reset the game variables so that the game can restart
    startOver();
  }
}

// ======================================================
// Function: startOver()
// Purpose: Reset the game state to allow for a new game
// ======================================================

function startOver() {
  level = 0;
  gamePattern = [];
  started = false;
}
